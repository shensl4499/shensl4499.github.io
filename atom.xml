<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>waneruc920</title>
  
  <subtitle>waner</subtitle>
  <link href="http://www.uc920.top/atom.xml" rel="self"/>
  
  <link href="http://www.uc920.top/"/>
  <updated>2023-03-18T10:48:08.710Z</updated>
  <id>http://www.uc920.top/</id>
  
  <author>
    <name>waner</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gpx_to_strava记录</title>
    <link href="http://www.uc920.top/2023/03/18/gpx-to-strava%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.uc920.top/2023/03/18/gpx-to-strava%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-18T09:36:55.000Z</published>
    <updated>2023-03-18T10:48:08.710Z</updated>
    
    <content type="html"><![CDATA[<p>running_page中提供的<code>gpx_to_strava_sync.py</code>脚本如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3(python) scripts/gpx_to_strava_sync.py <span class="hljs-variable">$&#123;client_id&#125;</span> <span class="hljs-variable">$&#123;client_secret&#125;</span>  <span class="hljs-variable">$&#123;strava_refresch_token&#125;</span> --all<br></code></pre></td></tr></table></figure><p>其中的 <code>$&#123;client_id&#125;</code> <code>$&#123;client_secret&#125;</code>  <code>$&#123;strava_refresch_token&#125;</code>获取如下。</p><h2 id="1-注册strava并创建API应用程序"><a href="#1-注册strava并创建API应用程序" class="headerlink" title="1.注册strava并创建API应用程序"></a>1.注册strava并创建API应用程序</h2><p>访问<a href="https://www.strava.com/%EF%BC%8C%E6%B3%A8%E5%86%8C%E8%B4%A6%E5%8F%B7%E6%88%90%E5%8A%9F%E5%90%8E%EF%BC%8C%E5%9C%A8%E4%B8%AA%E4%BA%BA%E8%AE%BE%E7%BD%AE%E9%87%8C%E7%82%B9%E5%87%BB%E2%80%9C%E6%88%91%E7%9A%84API%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E2%80%9D%EF%BC%8C%E4%BF%A1%E6%81%AF%E9%9A%8F%E4%BE%BF%E5%A1%AB%E5%86%99%E5%8D%B3%E5%8F%AF%EF%BC%8C">https://www.strava.com/，注册账号成功后，在个人设置里点击“我的API应用程序”，信息随便填写即可，</a></p><p><img src="https://fastly.jsdelivr.net/gh/shensl4499/myimage@main/img/image-20230318175638661.png" alt="image-20230318175638661"></p><p>点击保存后页面</p><p><img src="https://fastly.jsdelivr.net/gh/shensl4499/myimage@main/img/image-20230318175955585.png" alt="image-20230318175955585"></p><p>可以看到一下关键信息，其中</p><p>客户ID就是client_id，客户端秘钥就是client_secret，以及访问令牌和刷新令牌，需要注意的是这两个令牌的使用权限范围是read，只有读数据的权限，如果要上传gpx到strava，需要有write的权限，下面就开始生成带有write权限的令牌。</p><h2 id="2-获取授权码"><a href="#2-获取授权码" class="headerlink" title="2.获取授权码"></a>2.获取授权码</h2><ol><li><p>为获取strava授权创建请求链接，请求链接<code>https://www.strava.com/oauth/authorize</code>以及携带参数</p><table><thead><tr><th>参数</th><th>值说明</th></tr></thead><tbody><tr><td>client_id</td><td>你的客户ID，可在注册的api应用程序页面获取</td></tr><tr><td>redirect_ur</td><td>用户将使用授权代码重定向到的 URL。本地主机上一个随机但是唯一的应该没问题。</td></tr><tr><td>response_type</td><td>必须为<code>code</code></td></tr><tr><td>scope</td><td>‘read’, ‘read_all’, ‘profile:read_all’, ‘profile:write’, ‘profile:write’, ‘activity:read’, ‘activity:read_all’, ‘activity:write’</td></tr></tbody></table></li><li><p>先登录<code>strava</code>，并在浏览器地址栏输入下面的链接，其中<code>[REPLACE_WITH_YOUR_CLIENT_ID]</code>要换成自己的<code>client_id</code>，回车。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://www.strava.com/oauth/authorize?client_id=[REPLACE_WITH_YOUR_CLIENT_ID]&amp;response_type=code&amp;redirect_uri=http://localhost/exchange_token&amp;approval_prompt=force&amp;scope=read_all,profile:read_all,activity:read_all,activity:write<br></code></pre></td></tr></table></figure><p>链接最后的<code>activity:write</code>就是对活动记录的更新和写入权限，这个一定要带着，该api为HTTP GET请求。</p></li><li><p>在页面上，勾选所需要的权限，并点击“授权”按钮。</p></li><li><p>地址栏会自动返回类似<code>http://localhost/exchange_token?state=&amp;code=9aaa9fea21c74b6ba6e67ba8823487598aad8670&amp;scope=read,activity:write,activity:read_all,profile:write,profile:read_all,read_all</code>。</p></li><li><p>页面提示404不用管，从重定向链接中code参数值<code>9aaa9fea21c74b6ba6e67ba8823487598aad8670</code>。用于下面获取带有带有write权限的令牌使用。</p></li></ol><h2 id="3-获取带有write权限的令牌"><a href="#3-获取带有write权限的令牌" class="headerlink" title="3.获取带有write权限的令牌"></a>3.获取带有write权限的令牌</h2><ol><li><p>使用任何HTTP Rest客户端，对<code>https://www.strava.com/oauth/token</code>发送POST请求，<a href="https://developers.strava.com/docs/authentication/#token-exchange">查看api文档</a>，携带参数如下：</p><table><thead><tr><th>参数</th><th>值说明</th></tr></thead><tbody><tr><td>client_id</td><td>你的客户ID，可在注册的api应用程序页面获取</td></tr><tr><td>client_secret</td><td>你的客户端秘钥，可在注册的api应用程序页面获取</td></tr><tr><td>code</td><td>上面步骤中获得的授权码</td></tr><tr><td>grant_type</td><td>请求的授权类型，进行身份认证，必须是<code>authorization_code</code></td></tr></tbody></table></li><li><p>我使用的是<code>Postman</code>工具，<a href="https://www.postman.com/downloads/">Postman下载</a>，发起请求，可以在返回的JSON串中拿到刷新令牌。</p></li></ol><p><img src="https://fastly.jsdelivr.net/gh/shensl4499/myimage@main/img/image-20230318183651521.png" alt="image-20230318183651521"></p><ol start="3"><li>拿到<code>refresh_token</code>，就可以执行<code>running_page</code>中的<code>gpx_to_strava_sync.py</code>脚本了，收工。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://yizeng.me/2017/01/11/get-a-strava-api-access-token-with-write-permission/">Get a Strava API access token with write permission</a> from <a href="https://yizeng.me/blog/">Yi Zeng’s Blog</a>。</li></ol>]]></content>
    
    
    <summary type="html">running_page项目中，运行codoon脚本生成了GPX数据，将GPX导入到strava中，做一下整理。</summary>
    
    
    
    <category term="教程" scheme="http://www.uc920.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="http://www.uc920.top/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="跑步" scheme="http://www.uc920.top/tags/%E8%B7%91%E6%AD%A5/"/>
    
    <category term="api" scheme="http://www.uc920.top/tags/api/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法备忘录</title>
    <link href="http://www.uc920.top/2023/03/11/Markdown%E8%AF%AD%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://www.uc920.top/2023/03/11/Markdown%E8%AF%AD%E6%B3%95%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2023-03-11T07:08:05.000Z</published>
    <updated>2023-03-13T01:53:42.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="折叠展开"><a href="#折叠展开" class="headerlink" title="折叠展开"></a>折叠展开</h2><p>折叠展开用到了2个标签。<code>details</code> 和 <code>summary</code>。使用这2个标签就默认是html语言了。里面的内容只能是html代码。</p><p>举例：</p><p>这里是源代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;details&gt;<br>    &lt;summary&gt;<br>        点击这里查看剩余内容<br>    &lt;/summary&gt;<br>    ------两个黄鹂鸣翠柳，一行白鹭上青天。<br>&lt;/details&gt;<br></code></pre></td></tr></table></figure><p>效果如下：</p><details>    <summary>        点击这里查看剩余内容    </summary>    ------两个黄鹂鸣翠柳，一行白鹭上青天。</details>]]></content>
    
    
    <summary type="html">Markdown标签用法</summary>
    
    
    
    
    <category term="Markdown语法" scheme="http://www.uc920.top/tags/Markdown%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>running_page汇总</title>
    <link href="http://www.uc920.top/2023/03/09/running_page%E6%B1%87%E6%80%BB/"/>
    <id>http://www.uc920.top/2023/03/09/running_page%E6%B1%87%E6%80%BB/</id>
    <published>2023-03-09T13:44:00.000Z</published>
    <updated>2023-03-11T10:10:32.840Z</updated>
    
    <content type="html"><![CDATA[<H1><center>running_page 汇总</center></H1><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>​        一年前在GitHub上看到yihong大佬分享的running_page前端开源项目，<strong>页面非常炫酷</strong>。之前把项目拉取下来在本地运行，按照操作步骤也生成了自己的跑步数据。后来由于疏于跑步就没有坚持同步。今天从头开始系统性的把这个项目学习了一番，写这篇文章用于记录自己折腾的过程，为希望以此项目搭建自己的炫酷跑步平台的小伙伴写个详细的教程，也加深一下自己对此项目的理解。</p><ul><li>项目地址：<a href="https://github.com/yihong0618/running_page">running_page</a></li><li>项目作者：<a href="https://github.com/yihong0618">yihong</a></li><li>我的跑步展示：<a href="https://www.waner.run/">随风飞翔</a></li></ul><p>目前（2023.3.10）支持的来源有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">Strava<br>Nike Run Club<br>Garmin<br>Garmin-cn<br>Keep<br>悦跑圈<br>咕咚<br>郁金香运动<br>GPX<br>TCX<br>Tcx+Strava(upload all tcx data to strava)<br>Gpx+Strava(upload all tcx data to strava)<br>Nike+Strava(Using NRC Run, Strava backup data)<br>Garmin_to_Strava(Using Garmin Run, Strava backup data)<br>Strava_to_Garmin(Using Strava Run, Garmin backup data)<br></code></pre></td></tr></table></figure><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>1.该项目使用Python语言开发，运行之前需要安装Python。<a href="https://zhuanlan.zhihu.com/p/111168324">安装python教程点此处查看</a></p><p>2.从GitHub上拉取推送项目，需要使用Git。<a href="https://zhuanlan.zhihu.com/p/443527549">安装Git教程点此处查看</a></p><p>3.编辑器建议使用VSCode，支持各种类型文件语法高亮，改代码比较方便直观。<a href="https://cloud.tencent.com/developer/article/2119156">安装VSCode教程点此处查看</a></p><h3 id="项目拉取"><a href="#项目拉取" class="headerlink" title="项目拉取"></a>项目拉取</h3><p>​    作者README设置的默认是英文，阅读有障碍的话可以切换为简体中文，阅读该项目的说明书后开始拉取。建议将资源库Fork到自己的空间里，这样以后可以自定义一些页面后，上传到自己的GitHub账号上，再配合GitHub Actions实现自动化部署。</p><h3 id="项目Demo运行"><a href="#项目Demo运行" class="headerlink" title="项目Demo运行"></a>项目Demo运行</h3><h3 id="作者数据删减"><a href="#作者数据删减" class="headerlink" title="作者数据删减"></a>作者数据删减</h3><h3 id="生成本人数据"><a href="#生成本人数据" class="headerlink" title="生成本人数据"></a>生成本人数据</h3><h3 id="项目本地运行"><a href="#项目本地运行" class="headerlink" title="项目本地运行"></a>项目本地运行</h3><h3 id="利用GitHub-Actions调用Vercel部署"><a href="#利用GitHub-Actions调用Vercel部署" class="headerlink" title="利用GitHub Actions调用Vercel部署"></a>利用GitHub Actions调用Vercel部署</h3><h3 id="个人域名购买"><a href="#个人域名购买" class="headerlink" title="个人域名购买"></a>个人域名购买</h3><h3 id="Vercel绑定域名"><a href="#Vercel绑定域名" class="headerlink" title="Vercel绑定域名"></a>Vercel绑定域名</h3>]]></content>
    
    
    <summary type="html">跑步数据展示平台的搭建与部署</summary>
    
    
    
    <category term="教程" scheme="http://www.uc920.top/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="教程" scheme="http://www.uc920.top/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="跑步" scheme="http://www.uc920.top/tags/%E8%B7%91%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 指令</title>
    <link href="http://www.uc920.top/2023/03/08/Hexo-%E6%8C%87%E4%BB%A4/"/>
    <id>http://www.uc920.top/2023/03/08/Hexo-%E6%8C%87%E4%BB%A4/</id>
    <published>2023-03-08T13:45:08.000Z</published>
    <updated>2023-03-14T04:26:26.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>   为了方便使用Hexo命令，在这里做一下记录。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令:"></a>常用指令:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&#x27;fileName&#x27;</span> <span class="hljs-comment">#生成一个新文件。也可写作 hexo new &#x27;fileName&#x27;或hexo new post &#x27;fileName&#x27;</span><br>hexo g <span class="hljs-comment">#生成静态文件。也可写作 hexo generate</span><br>hexo s <span class="hljs-comment">#启动本地服务器。也可写作 hexo server，ctrl+c 结束，默认地址为：http://localhost:4000/</span><br>hexo d <span class="hljs-comment">#部署发布至网站。也可写作 hexo deploy</span><br>hexo g -d <span class="hljs-comment">#生成静态文件并部署。</span><br>hexo clean <span class="hljs-comment">#清除生成的静态文件，也就是清缓存。这个命令没有简写**</span><br></code></pre></td></tr></table></figure><h2 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明:"></a>指令说明:</h2><p><code>hexo server</code>        #Hexo 会监视文件变动并自动更新，除修改<strong>站点配置文件</strong>外,无须重启服务器,直接刷新网页即可生效。<br> <code>hexo server -s</code> #以静态模式启动<br> <code>hexo server -p 5000</code> #更改访问端口   (默认端口为4000，’ctrl + c’关闭server)<br> <code>hexo server -i IP地址</code> #自定义 IP<br> <code>hexo clean</code> #清除缓存  ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹<br> <code>hexo g</code> #生成静态网页  (执行 <code>$ hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“   下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “   路径下)<br> <code>hexo d</code> #将本地数据部署到远端服务器(如github)<br> <code>hexo init 文件夹名称</code> #初始化XX文件夹名称<br> <code>npm update hexo -g</code>#升级<br> <code>npm install hexo -g</code>#安装<br> <code>node-v</code>          #查看node.js版本号<br> <code>npm -v</code>        #查看npm版本号<br> <code>git --version</code>  #查看git版本号<br> <code>hexo -v</code>      #查看hexo版本号</p><p><code>hexo publish [layout] &lt;title&gt;</code>   #通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹,如:<code>$ hexo publish [layout] &lt;title&gt;</code>,草稿默认是不会显示在页面中的，可在执行时加上 <code>--draft</code> 参数，或是把 <code>render_drafts</code> 参数设为 <code>true</code>来预览草稿。</p>]]></content>
    
    
    <summary type="html">Hexo的常用指令</summary>
    
    
    
    <category term="Hexo" scheme="http://www.uc920.top/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="http://www.uc920.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客记录</title>
    <link href="http://www.uc920.top/2023/03/08/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.uc920.top/2023/03/08/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-08T13:44:57.000Z</published>
    <updated>2023-03-11T10:10:40.369Z</updated>
    
    <content type="html"><![CDATA[<p>​    逛github看到很多g友都有自己的个人博客，做的很好，产生了参考别人的教程搞一个的想法。本着免费+试用的原则，首先找到了GitHub Pages+Jekyll的教程，动手开始搭建。在选择jekyll主题的时候教程说的不是很详细，导致改了不少配置项没生效，试了很久也没成功。</p><p>​        继续探索发现不少GitHub+Hexo的教程。对比了一下Hexo和jekyll的主题，感觉Hexo更炫酷一点，继续尝试。</p><p>​        参考了<a href="https://www.zhihu.com/people/crystal">crystal</a>在知乎上写的一篇 <a href="https://zhuanlan.zhihu.com/p/60578464">使用 Hexo+GitHub 搭建个人免费博客教程（小白向）</a>教程，写的很详细。跟着教程操作一次成功。虽然整体下来难度不大，但还是比较折腾的。记录一下，作为个人博客的第一篇。</p><p>​    </p>]]></content>
    
    
    <summary type="html">搭建博客的历程</summary>
    
    
    
    <category term="搭建博客" scheme="http://www.uc920.top/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="教程" scheme="http://www.uc920.top/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="搭建博客" scheme="http://www.uc920.top/tags/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
